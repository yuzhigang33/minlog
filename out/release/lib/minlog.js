// Generated by CoffeeScript 1.8.0
var MinLog, cwd, defaultAccessLogFile, fs, moment, os, path;

path = require('path');

fs = require('fs');

os = require('options-stream');

moment = require('moment');

cwd = process.cwd();

defaultAccessLogFile = "[" + cwd + "/logs/" + (path.basename(path.basename(process.argv[1], '.js'), '.coffee')) + "-]YYYY-MM-DD[.log]";

MinLog = (function() {
  function MinLog(options) {
    var fileName;
    this.options = os({
      duration: 2000,
      buffLength: 0,
      fileName: defaultAccessLogFile
    }, options);
    this.log_day = moment().format('YYYY-MM-DD');
    this.lastCheckTime = Date.now();
    this.buffer = [];
    fileName = moment().format(this.options.fileName);
    this.stream = this.newStream(fileName);
    this._checkFile();
  }

  MinLog.prototype.newStream = function(fileName) {
    var stream;
    this.log_day = moment().format('YYYY-MM-DD');
    stream = fs.createWriteStream(fileName, {
      flags: 'a'
    });
    stream.on('error', function(e) {
      return console.error('log stream ocur error', e);
    });
    stream.on('open', function() {});
    stream.on('close', function() {});
    return this.stream = stream;
  };

  MinLog.prototype.write = function(str) {
    var now;
    this.buffer.push(str);
    if (this.buffer.length > this.options.buffLength) {
      this.stream.write(this.buffer.join(''));
      this.buffer.length = 0;
      return;
    }
    now = Date.now();
    if (now - this.lastCheckTime > this.options.duration) {
      this.stream.write(this.buffer.join(''));
      this.lastCheckTime = now;
      return this.buffer.length = 0;
    }
  };

  MinLog.prototype.info = function(str) {
    return this.write('[' + new Date + '] ' + 'INFO ' + str + '\n');
  };

  MinLog.prototype.debug = function(str) {
    return this.write('[' + new Date + '] ' + 'DEBUG ' + str + '\n');
  };

  MinLog.prototype.warn = function(str) {
    return this.write('[' + new Date + '] ' + 'WARNING ' + str + '\n');
  };

  MinLog.prototype.error = function(str) {
    return this.write('[' + new Date + '] ' + 'ERROR ' + str + '\n');
  };

  MinLog.prototype._checkFile = function() {
    var now, timeout;
    now = new Date;
    timeout = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1) - now;
    setTimeout(this._checkFile.bind(this), timeout);
    if (this.log_day !== moment().format('YYYY-MM-DD')) {
      this.stream.end();
      this.stream = null;
      return this.newStream(moment().format(this.options.fileName));
    }
  };

  return MinLog;

})();

module.exports = function(options) {
  return new MinLog(options);
};
